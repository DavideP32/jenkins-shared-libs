import groovy.json.JsonSlurper


def QA_RESULT = [:]
def GITLAB_REPORTS_PROJECT_ID = 70428016 //375

@Library('shared-library') _

pipeline {
    agent any

    environment {
        GITLAB_TOKEN = credentials('gitlab-sistemisti-qg-token')
    }
        
    stages{

        stage('SCM Checkout') {
            
                
            steps {
                echo "starting SCM checkout"
                script {
                    sh 'rm -rf -- ..?* .[!.]* *'
                }
                checkout([
                        $class                           : 'GitSCM',
                        branches                         : [[name: env.gitlabBranch]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions                       : [], 
                        submoduleCfg                     : [],
                        userRemoteConfigs                : [
                                [
                                        credentialsId: '0ce2d803-fcc5-4faf-b45f-5fca9f59ffd8',
                                        url          : env.gitlabUrl + "/" + env.gitlabGroup + "/" + env.gitlabPproject + ".git"
                                ]
                        ]
                ])


                
            }
        }

        stage('Version Check'){
            steps{
                script {
                    def tag = sh(
                            script: 'git describe --exact-match --tags $(git rev-parse HEAD) || echo ""', 
                            returnStdout: true
                    ).trim()

                    if (tag) {
                        echo "The current commit has a tag: ${tag}"
                        if (tag ==~ /^\d+\.\d+\.\d+-release$/) {
                            echo "Tag matches the format x.y.z-release."
                            APPLICATION_VERSION = tag.split("-")[0]
                        } else { 
                            echo "Tag does NOT match the format x.y.z-release."
                            APPLICATION_VERSION = 'dev'
                        }
                    } else {
                        echo "There is no tag."
                        APPLICATION_VERSION = 'dev'
                    }

                    // if (APPLICATION_VERSION != "dev") {
                    //     echo "Controllo se la versione ${APPLICATION_VERSION} è presente nei nomi delle cartelle."
                    //     // Chiamata API GitLab per ottenere la lista dei file e delle cartelle
                    //     def apiUrl = "https://gitlab-bper.gbbper.priv/api/v4/projects/${GITLAB_REPORTS_PROJECT_ID}/repository/tree?path=${env.gitlabGroup}/${env.gitlabPproject}/&ref=master"

                    //     // Effettua la chiamata all'API per verificare la presenza della versione
                    //     def response = sh(
                    //             script: """curl -k -s -H "PRIVATE-TOKEN: $GITLAB_TOKEN" "${apiUrl}" """,
                    //             returnStdout: true
                    //     ).trim()


                    //     try {
                    //         def jsonResponse = new groovy.json.JsonSlurper().parseText(response)
                    //         def versionExists = jsonResponse.any { it.type == "tree" && it.name == APPLICATION_VERSION }
                    //         if (versionExists) {
                    //             error "La versione ${APPLICATION_VERSION} è stata già buildata in precedenza. E' necessario aggiornarla."
                    //         } else {
                    //             echo "Versione '${APPLICATION_VERSION}."
                    //         }
                    //     } catch (Exception e) {
                    //         echo "Errore durante l'analisi della risposta JSON: ${e.message}"
                    //         error("Interrotto a causa di un errore nell'elaborazione della risposta JSON.")
                    //     }

                    // }
                }
            }
        }

        stage('QA') {
            steps {
                script{
                    QA_RESULT = qaSonar gitlabUrl: env.gitlabUrl,
                            gitlabGroup: env.gitlabGroup,
                            gitlabPproject: env.gitlabPproject,
                            gitlabBranch: env.gitlabBranch,
                            APPLICATION_VERSION: APPLICATION_VERSION
                }
            }
        }

        stage('Push QG Result') {
            
            steps {
                echo "push QG"

                script {
                    dir("tmp") {
                        checkout([
                            $class                           : 'GitSCM',
                            branches                         : [[name: "master"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : [],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [
                                    [
                                            credentialsId: '0ce2d803-fcc5-4faf-b45f-5fca9f59ffd8',
                                            url          : 'https://gitlab.com/Dev1833023/pipeline-build.git' //"http://172.16.63.237/Devops/pipeline-build.git"
                                    ]
                            ]
                        ])
                    }

                    pushQG(
                        QA_RESULT: QA_RESULT,
                        APPLICATION_VERSION: APPLICATION_VERSION,
                        GITLAB_REPORTS_PROJECT_ID: GITLAB_REPORTS_PROJECT_ID
                    )
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'rm -rf -- ..?* .[!.]* *'
            }
        }
    }
}